#!/bin/bash

set -e

function echoSuccess() {
    echo -e "\033[0;32m $1 \033[0m"
}

function echoError() {
    echo -e "\033[0;31m $1 \033[0m"
}

function echoYellow() {
    echo -e "\033[1;33m $1 \033[0m"
}

if [[ $(/usr/bin/id -u) -ne 0 ]]; then
  echo "You need to run this script as root."
  exit
fi

DIR="${PWD}"
ROOT_DIR="/var/www/wpdeploy"
DOCKER_NETWORK_NAME="__wpdeploy_network"
MYSQL_CONTAINER_NAME="wpdeploy__mysql"
MYSQL_ROOT_PASSWORD=""

function createSecrets()  {
    echoSuccess '[*] Creating secrets'
    [ -d "$ROOT_DIR/secrets" ] || mkdir -p $ROOT_DIR/secrets/
    [ -f "$ROOT_DIR/secrets/mysql_root_password" ] || echo "this_is_root_password" > "$ROOT_DIR/secrets/mysql_root_password"

    chown root:root "$ROOT_DIR/secrets"
    chmod 700 "$ROOT_DIR/secrets"
}

function initializeDocker() {
    echoSuccess '[*] Initializing docker images & containers'

    # Create network
    docker network inspect $DOCKER_NETWORK_NAME > /dev/null 2>&1 || \
    docker network create $DOCKER_NETWORK_NAME > /dev/null 2>&1
    
    # Create database container
    docker run --name $MYSQL_CONTAINER_NAME \
    -e MYSQL_ROOT_PASSWORD=$MYSQL_ROOT_PASSWORD \
    -v "${ROOT_DIR}/mysql_data:/var/lib/mysql" \
    --network $DOCKER_NETWORK_NAME \
    --restart always \
    -d mysql:8 > /dev/null 2>&1
}

function execute_sql() {
    cmd="mysql -uroot -p$MYSQL_ROOT_PASSWORD -Bse \"$1\" 2>/dev/null"
    docker exec -it $MYSQL_CONTAINER_NAME sh -c "$cmd"
}

function create_database () {
    echoSuccess "[*] Creating database"
    execute_sql "CREATE DATABASE IF NOT EXISTS $1"
}

function create_user() {
    echoSuccess "[*] Creating user"
    USER="$1"
    PASS="$2"
    cmd="CREATE USER '$USER'@'%' IDENTIFIED BY '$PASS'"
    execute_sql "$cmd"
}

function grant_permission() {
    echoSuccess "[*] Granting permissions"
    DB="$1"
    USER="$2"
    execute_sql "GRANT ALL on $DB.* TO '$USER'@'%'"
    execute_sql "FLUSH PRIVILEGES"
}

function wpdeployInit() {
    echoSuccess "Initializing"
    createSecrets
    sleep 1
    MYSQL_ROOT_PASSWORD=$(<${ROOT_DIR}/secrets/mysql_root_password)
    [ -z $MYSQL_ROOT_PASSWORD ] && echoError "MYSQL_ROOT_PASSWORD not found" && exit 1
    initializeDocker
    exit
}


function wpdeployCreateWordpressSite() {

    [ -z $1 ] && echoError "No domain provided" && exit

    echoSuccess "Creating wordpress site"

    [ -z $MYSQL_ROOT_PASSWORD ] && MYSQL_ROOT_PASSWORD=$(<${ROOT_DIR}/secrets/mysql_root_password)

    local domain="$1"
    local name="${domain//./_}"
    local port=$(comm -23 <(seq 49152 65535 | sort) <(ss -Htan | awk '{print $4}' | cut -d':' -f2 | sort -u) | shuf | head -n 1)

    local sameNameContainer=$(docker ps -a --filter="name=${name}_wp" | grep "$name" | awk '{print $1}')

    if [ ! -x $sameNameContainer ]; then
        echoError "Container with this domain already exits" && exit 1
    fi

    mysql_root_password=$(openssl rand -hex 20)
    mysql_user=$(openssl rand -hex 12)
    mysql_password=$(openssl rand -hex 20)
    mysql_database=$(openssl rand -hex 8)

    create_database $mysql_database
    create_user $mysql_user $mysql_password
    grant_permission $mysql_database $mysql_user
    
    docker run --name "${name}_wp" \
    -e WORDPRESS_DB_HOST="${MYSQL_CONTAINER_NAME}:3306" \
    -e WORDPRESS_DB_USER=$mysql_user \
    -e WORDPRESS_DB_PASSWORD=$mysql_password \
    -e WORDPRESS_DB_NAME=$mysql_database \
    -v "${ROOT_DIR}/sites/${name}/wordpress:/var/www/html" \
    --network $DOCKER_NETWORK_NAME \
    --restart always \
    -p "$port:80" \
    -d wordpress:6.0 >/dev/null
    exit
}


function wpdeployDeleteWordpressSite() {
    [ -z $1 ] && echoError "No domain provided" && exit 1
    local domain="$1"
    local name="${domain//./_}"

    local sameNameContainer=$(docker ps -a --filter="name=${name}_wp" | grep "${name}_wp" | awk '{print $1}')

    [ -z "$sameNameContainer" ] && echoSuccess 'No container found' && exit 0

    docker rm $sameNameContainer --force >/dev/null && rm -rf "$ROOT_DIR/sites/${name}" && echoSuccess "Done!"
}

install_docker() {
    apt-get remove -y docker docker-engine docker.io containerd runc
    apt-get update -y
    apt-get install -y \
        apt-transport-https \
        ca-certificates \
        curl \
        gnupg \
        lsb-release
    curl -fsSL https://download.docker.com/linux/ubuntu/gpg | sudo gpg --dearmor -o /usr/share/keyrings/docker-archive-keyring.gpg
    echo \
    "deb [arch=amd64 signed-by=/usr/share/keyrings/docker-archive-keyring.gpg] https://download.docker.com/linux/ubuntu \
    $(lsb_release -cs) stable" | sudo tee /etc/apt/sources.list.d/docker.list > /dev/null
    docker --version
}

install() {
    echoSuccess "Creating symbolic"
    ln -sf "${PWD}/pork" "/usr/bin"
    
    echoSuccess "Install docker (if not installed)"
    docker --version 2>/dev/null || install_docker

    wpdeployInit
}


[ "$1" = "install" ] && install
[ "$1" = "wp:create" ] && wpdeployCreateWordpressSite $2
[ "$1" = "wp:delete" ] && wpdeployDeleteWordpressSite $2